$ git --version

$ git config --global user.name "samanta"
$ git config --global user.email ""

$ mkdir myproject
$ cd myproject

$ git init   #Initialized empty Git repository in /Users/user/myproject/.git/

$ ls
git/  myproject1/  README.md

$ ls -a
./  ../  .git/  git/  myproject1/  README.md

$ rm -rf .git 
$ ls -a 
$ git init


$ git branch
$ git add README.md
$ git add .

$ git commit -m "first commit"
$ git branch -M main
$ git remote add origin https://github.com/SAMANTA1401/GIT.git
$ git push -u origin main
$ git pull


$ git status
On branch main
Your branch is up to date with 'origin/main'.

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        git/
        myproject1/

nothing added to commit but untracked files present (use "git add" to track)

$ git log
commit 174ea513f57cadb3f1f0699d594af8f5fa196453 (HEAD -> main, origin/main)
Author: Shubhankar Samanta <105944619+SAMANTA1401@users.noreply.github.com>
Date:   Mon Dec 16 14:23:03 2024 +0530

    Create .gitignore

commit 73e6a387512f490582b09f339d7da965138cca7e
Author: smanta1401 <105944619+SAMANTA1401@users.noreply.github.com>
Date:   Mon Dec 16 14:21:05 2024 +0530

    first commit

$ git add .
warning: in the working copy of 'git/command.txt', CRLF will be replaced by LF the next time Git touches it
warning: in the working copy of 'git/git.txt', CRLF will be replaced by LF the next time Git touches it
warning: in the working copy of 'myproject1/style.css', CRLF will be replaced by LF the next time Git touches it

$ git status
On branch main
Your branch is up to date with 'origin/main'.

Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        new file:   git/command.txt
        new file:   git/git.txt
        new file:   git/theory.ipynb
        new file:   myproject1/img1.jpg
        new file:   myproject1/style.css
        new file:   myproject1/test.html

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   git/command.txt

$ git commit -m "second commit"
[main 7106cd0] second commit
 6 files changed, 239 insertions(+)
 create mode 100644 git/command.txt
 create mode 100644 git/git.txt
 create mode 100644 git/theory.ipynb
 create mode 100644 myproject1/img1.jpg
 create mode 100644 myproject1/style.css
 create mode 100644 myproject1/test.html


$ git config

$ git config --global user.name "samanta1401"
$ git config --global user.email "psamanta1401@gmail.com"

$ git config --list
$ history
$ clear 

$ git status
On branch main
Your branch is ahead of 'origin/main' by 1 commit.
  (use "git push" to publish your local commits)

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   git/command.txt

no changes added to commit (use "git add" and/or "git commit -a")

$ git add .
$ git status
On branch main
Your branch is ahead of 'origin/main' by 1 commit.
  (use "git push" to publish your local commits)

Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        modified:   git/command.txt

$ git commit -m "third commit"
[main 946edd1] third commit
 1 file changed, 32 insertions(+)

$ git log
commit 946edd1aeb701b96c62543172c4cb728d2fb1d57 (HEAD -> main)
Author: samanta1401 <psamanta1401@gmail.com>
Date:   Mon Dec 16 16:53:32 2024 +0530

    third commit

commit 7106cd0b8202c4a2f141bddac7d5cafa42945bca
Author: smanta1401 <105944619+SAMANTA1401@users.noreply.github.com>
Date:   Mon Dec 16 15:47:59 2024 +0530

    second commit


1:36:07

$ git show 946ed
commit 946edd1aeb701b96c62543172c4cb728d2fb1d57 (HEAD -> main)
Author: samanta1401 <psamanta1401@gmail.com>
Date:   Mon Dec 16 16:53:32 2024 +0530

    third commit

diff --git a/git/command.txt b/git/command.txt
index dd7b1cd..40e6bab 100644
--- a/git/command.txt
+++ b/git/command.txt
@@ -76,3 +76,35 @@ Changes not staged for commit:

$ git reset .   # to unstage the commits
Unstaged changes after reset:
M       git/command.txt

$ git status
On branch main
Your branch is ahead of 'origin/main' by 2 commits.
  (use "git push" to publish your local commits)

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   git/command.txt

no changes added to commit (use "git add" and/or "git commit -a")

$ git branch
* main

$ git branch newsubbranch  # create new branch
$ git branch
* main
  newsubbranch

$ git checkout newsubbranch # switched to new branch and all code is copied to new branch
Switched to branch 'newsubbranch'
M       git/command.txt

$ git status
On branch newsubbranch
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   git/command.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        myproject1/xyz.txt

no changes added to commit (use "git add" and/or "git commit -a")

$ git status
On branch newsubbranch
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   git/command.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        myproject1/xyz.txt

no changes added to commit (use "git add" and/or "git commit -a")

$ git add .
warning: in the working copy of 'git/command.txt', CRLF will be replaced by LF the next time Git touches it

$ git status
On branch newsubbranch
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        modified:   git/command.txt
        new file:   myproject1/xyz.txt

$ git commit -m "
> modify subbranch"
[newsubbranch 0aff4bf] modify subbranch
 2 files changed, 85 insertions(+)
 create mode 100644 myproject1/xyz.txt

 $ git log
commit 0aff4bfbdebe3d765b3aa757f99e4a80918ea9cf (HEAD -> newsubbranch)
Author: samanta1401 <psamanta1401@gmail.com>
Date:   Mon Dec 16 21:05:28 2024 +0530

    modify subbranch

commit 946edd1aeb701b96c62543172c4cb728d2fb1d57 (main)
Author: samanta1401 <psamanta1401@gmail.com>
Date:   Mon Dec 16 16:53:32 2024 +0530

    third commit

$ git branch
  main
* newsubbranch

$ git checkout main
error: Your local changes to the following files would be overwritten by checkout:
        git/command.txt
Please commit your changes or stash them before you switch branches.
Aborting

$ git branch
  main
* newsubbranch

$ git checkout main
error: Your local changes to the following files would be overwritten by checkout:
        git/command.txt
Please commit your changes or stash them before you switch branches.
Aborting

$ git add .
warning: in the working copy of 'git/command.txt', CRLF will be replaced by LF the next time Git touches it

$ git commit -m "switch to main"
[newsubbranch 0f0be4f] switch to main
 1 file changed, 53 insertions(+), 1 deletion(-)
[newsubbranch 0f0be4f] switch to main
 1 file changed, 53 insertions(+), 1 deletion(-)
 1 file changed, 53 insertions(+), 1 deletion(-)

$ git checkout main
Switched to branch 'main'
Your branch is ahead of 'origin/main' by 2 commits.
  (use "git push" to publish your local commits)

$ git log
commit 946edd1aeb701b96c62543172c4cb728d2fb1d57 (HEAD -> main)
Author: samanta1401 <psamanta1401@gmail.com>
Date:   Mon Dec 16 16:53:32 2024 +0530

    third commit

commit 7106cd0b8202c4a2f141bddac7d5cafa42945bca
Author: smanta1401 <105944619+SAMANTA1401@users.noreply.github.com>
Date:   Mon Dec 16 15:47:59 2024 +0530

    second commit

$ git merge newsubbranch
Updating 946edd1..0f0be4f
Fast-forward
 git/command.txt    | 138 ++++++++++++++++++++++++++++++++++++++++++++++++++++-
 myproject1/xyz.txt |   1 +
 2 files changed, 138 insertions(+), 1 deletion(-)
 create mode 100644 myproject1/xyz.txt

$ cd .git
$ ls
COMMIT_EDITMSG  config  description  FETCH_HEAD  HEAD  hooks/  index  info/  logs/  objects/  ORIG_HEAD  refs/
$ cd .. # to back 
$ git branch
* main
  newsubbranch

$ git branch -d newsubbranch
Deleted branch newsubbranch (was 0f0be4f).


$ git branch branchsub1

$ git branch
  branchsub1
* main

$ git checkout branchsub1
Switched to branch 'branchsub1'

$ git branch
* branchsub1
  main

$ git status
On branch branchsub1
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   myproject1/testing.py

no changes added to commit (use "git add" and/or "git commit -a")

$ git checkout main
Switched to branch 'main'
M       myproject1/testing.py
Your branch is ahead of 'origin/main' by 5 commits.
  (use "git push" to publish your local commits)

$ git status
On branch main
Your branch is ahead of 'origin/main' by 5 commits.
  (use "git push" to publish your local commits)

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   myproject1/testing.py

no changes added to commit (use "git add" and/or "git commit -a")

$ git checkout branchsub1
Switched to branch 'branchsub1'
M       myproject1/testing.py

$ git add .
warning: in the working copy of 'myproject1/testing.py', CRLF will be replaced by LF the next time Git touches it

$ git commit -m "multiplication added"
[branchsub1 3531e4a] multiplication added
 1 file changed, 3 insertions(+), 1 deletion(-)

$ git checkout main
Switched to branch 'main'
Your branch is ahead of 'origin/main' by 5 commits.
  (use "git push" to publish your local commits)


$ git status
On branch main
Your branch is ahead of 'origin/main' by 5 commits.
  (use "git push" to publish your local commits)

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        myproject1/testing2.py           #print("hello how are you?")                    

nothing added to commit but untracked files present (use "git add" to track)

$ git add .

$ git commit -m "dreated testing2.py on main"
[main 39945de] dreated testing2.py on main
 1 file changed, 1 insertion(+)
 create mode 100644 myproject1/testing2.py

$ git checkout branchsub1
Switched to branch 'branchsub1'


CONFLICT >>>>>

now i created myproject1/testing2.py on branchsub1 which is same as main branch but inside this i created different message than which inside the main branch

$ git branch
* branchsub1
  main

$ git status
On branch branchsub1
Untracked files:
  (use "git add <file>..." to include in what will be committed)
        myproject1/testing2.py   #print("what you are doing ? ")

nothing added to commit but untracked files present (use "git add" to track)

$ git add .
$ git commit -m "testing2.py added on branchsub1"
[branchsub1 0150331] testing2.py added on branchsub1
 1 file changed, 1 insertion(+)
 create mode 100644 myproject1/testing2.py

$ git checkout main  # always merge from master/main branch
Switched to branch 'main'
Your branch is ahead of 'origin/main' by 6 commits.
  (use "git push" to publish your local commits)

$ git merge branchsub1
Auto-merging myproject1/testing2.py
CONFLICT (add/add): Merge conflict in myproject1/testing2.py    # when two developer are working on same file then git cant understand who's code is come first place 
# print("hello how are you?") this or print("what you are doing ? ") this.
Automatic merge failed; fix conflicts and then commit the result.

<<<<<<< HEAD
print("hello how are you?")
=======
print("what you are doing ? ")
>>>>>>> branchsub1

# open the file check the code sequence and manully correct the code sequence like

print("hello how are you?")

print("what you are doing ? ")

then add and commit

$ git add .
$ git commit -m "resolve conflict"
[main 5992a25] resolve conflict

1:30:06

stashing>>>

$ touch stashingdemo.txt

$ git add .
$ git status
On branch main
Your branch is ahead of 'origin/main' by 9 commits.
  (use "git push" to publish your local commits)

Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        modified:   git/command.txt
        modified:   git/theory.ipynb
        new file:   stashingdemo.txt

$ git commit -m "stash file added"
[main 6e536a6] stash file added
 3 files changed, 147 insertions(+), 2 deletions(-)
 create mode 100644 stashingdemo.txt

# write "this is a stah file " inside 

$ git stash   # store this last change in a temporary branch and file get empty
Saved working directory and index state WIP on main: 6e536a6 stash file added     

$ git stash list  # find stash list
stash@{0}: WIP on main: 6e536a6 stash file adde 

# write another thing
$ git stash
Saved working directory and index state WIP on main: 6e536a6 stash file added

$ git stash list
stash@{0}: WIP on main: 6e536a6 stash file added
stash@{1}: WIP on main: 6e536a6 stash file added

# to get back
$ git stash apply stash@{0}
On branch main
Your branch is ahead of 'origin/main' by 10 commits.
  (use "git push" to publish your local commits)

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   stashingdemo.txt

no changes added to commit (use "git add" and/or "git commit -a")
$ git add .
$ git commit -m "stash 0 updated"
[main 3b54a4d] stash 0 updated
 1 file changed, 1 insertion(+)

$ git stash apply stash@{1}
Auto-merging stashingdemo.txt
CONFLICT (content): Merge conflict in stashingdemo.txt
On branch main
Your branch is ahead of 'origin/main' by 11 commits.
  (use "git push" to publish your local commits)

Unmerged paths:
  (use "git restore --staged <file>..." to unstage)
  (use "git add <file>..." to mark resolution)
        both modified:   stashingdemo.txt

no changes added to commit (use "git add" and/or "git commit -a")

$ git add .
$ git commit -m "stash updated"
[main 0b97a0b] stash updated
 1 file changed, 4 insertions(+), 1 deletion(-)  

$ git stash list
stash@{0}: WIP on main: 6e536a6 stash file added
stash@{1}: WIP on main: 6e536a6 stash file added

$ git stash clear
$ git stash list  # clear


# add file
$ touch reseting.txt
$ git add reseting.txt

$ git status
On branch main
Your branch is ahead of 'origin/main' by 12 commits.
  (use "git push" to publish your local commits)

Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        new file:   reseting.txt

# to unstage or remove from add 
$ git reset reseting.txt

$ git status
On branch main
Your branch is ahead of 'origin/main' by 12 commits.
  (use "git push" to publish your local commits)

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        reseting.txt

nothing added to commit but untracked files present (use "git add" to track)

$ git add .
$ git commit -m "reseting file added"
[main c4c1ffa] reseting file added
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 reseting.txt

$ git log --oneline
c4c1ffa (HEAD -> main) reseting file added
0b97a0b stash updated
3b54a4d stash 0 updated
6e536a6 stash file added
5992a25 resolve conflict
0150331 (branchsub1) testing2.py added on branchsub1
39945de dreated testing2.py on main
c4c1ffa (HEAD -> main) reseting file added
0b97a0b stash updated
3b54a4d stash 0 updated
6e536a6 stash file added
5992a25 resolve conflict
0150331 (branchsub1) testing2.py added on branchsub1
39945de dreated testing2.py on main
3531e4a multiplication added
c4c1ffa (HEAD -> main) reseting file added
0b97a0b stash updated
3b54a4d stash 0 updated
6e536a6 stash file added
5992a25 resolve conflict
0150331 (branchsub1) testing2.py added on branchsub1
39945de dreated testing2.py on main
3531e4a multiplication added
4378427 testing.py added
c4c1ffa (HEAD -> main) reseting file added
0b97a0b stash updated
3b54a4d stash 0 updated
6e536a6 stash file added
5992a25 resolve conflict
0150331 (branchsub1) testing2.py added on branchsub1
39945de dreated testing2.py on main
3531e4a multiplication added
4378427 testing.py added
0f0be4f switch to main
:...skipping...
c4c1ffa (HEAD -> main) reseting file added
0b97a0b stash updated
3b54a4d stash 0 updated
6e536a6 stash file added
5992a25 resolve conflict
0150331 (branchsub1) testing2.py added on branchsub1
39945de dreated testing2.py on main
3531e4a multiplication added
4378427 testing.py added
0f0be4f switch to main
0aff4bf modify subbranch
:...skipping...
c4c1ffa (HEAD -> main) reseting file added
0b97a0b stash updated
3b54a4d stash 0 updated
6e536a6 stash file added
5992a25 resolve conflict
0150331 (branchsub1) testing2.py added on branchsub1
39945de dreated testing2.py on main
3531e4a multiplication added
4378427 testing.py added
0f0be4f switch to main
0aff4bf modify subbranch
946edd1 third commit
: press q to exit and press enter to get more older log

# to revert commit 

Revert "reseting file added"

$ git revert c4c1ffa

This reverts commit c4c1ffa6d55a4c55bd650671ff8908a50810f82a.

# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch main
# Your branch is ahead of 'origin/main' by 13 commits.
#   (use "git push" to publish your local commits)
## Changes to be committed:                                                                      
#       deleted:    reseting.txt                                                                
#                                

$ git revert c4c1ffa
hint: Waiting for your editor to close the file... Vim: Error reading input, exiting...
Vim: preserving files...
Vim: Finished.
error: There was a problem with the editor 'vi'.
Please supply the message using either -m or -F option.

Press the Esc key to exit insert mode.
Type :wq and press Enter to save and close the editor.

$ git revert dcc22c5
[main 338e0cc] Revert "revert"
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 reseting.txt


Editing a File in Vim
i: Enter insert mode
Esc: Exit insert mode
:w: Save changes
:q: Quit Vim
:wq: Save changes and quit Vim
h, j, k, l: Move cursor left, down, up, right
x: Delete character under cursor
dw: Delete word under cursor
dd: Delete line under cursor

$ git revert c4c1ffa  # remove reseting file 
[main 6905de6] Revert "reseting file added"
 1 file changed, 0 insertions(+), 0 deletions(-)
 delete mode 100644 reseting.txt

 $ git push -u origin main
Enumerating objects: 67, done.
Counting objects: 100% (67/67), done.
Delta compression using up to 8 threads
Compressing objects: 100% (62/62), done.
Writing objects: 100% (66/66), 1.41 MiB | 981.00 KiB/s, done.
Total 66 (delta 27), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (27/27), done.
remote: This repository moved. Please use the new location:
remote:   https://github.com/SAMANTA1401/GIT_and_Docker.git
To https://github.com/SAMANTA1401/GIT.git
   174ea51..69c153b  main -> main
branch 'main' set up to track 'origin/main'.